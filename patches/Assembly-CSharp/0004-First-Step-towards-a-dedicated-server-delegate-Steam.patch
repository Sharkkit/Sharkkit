From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MeFisto94 <MeFisto94@users.noreply.github.com>
Date: Wed, 18 Aug 2021 04:25:28 +0200
Subject: [PATCH] First Step towards a dedicated server: delegate
 SteamNetworking calls to a wrapper that supports both connection types.


diff --git a/Raft_Network.cs b/Raft_Network.cs
index 6bd779e3325faf0a3d0c65af34ff20e2cd06fb60..2c923519f9be91999deea3f0e1d58a299d41009b 100644
--- a/Raft_Network.cs
+++ b/Raft_Network.cs
@@ -4,6 +4,7 @@ using System.Collections.Generic;
 using System.IO;
 using System.Linq;
 using System.Runtime.Serialization.Formatters.Binary;
+using SharkkitDedicated;
 using Steamworks;
 using UnityEngine;
 using UnityEngine.SceneManagement;
@@ -214,7 +215,7 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 		InvokeRepeating("CalculateBytes", 1f, 1f);
 		DontDestroyOnLoadManager.AddGameObject(base.gameObject);
 		localSteamID = SteamUser.GetSteamID();
-		SteamNetworking.AllowP2PPacketRelay(true);
+		NetworkWrapper.AllowP2PPacketRelay(true); // Sharkkit Dedicated - Redirect call to Network Wrapper
 		SceneManager.sceneLoaded += OnSceneLoaded;
 		bedRespawnPoint = GameObject.FindWithTag("RespawnPointBed");
 		loadSceneManager = GetComponent<LoadSceneManager>();
@@ -230,14 +231,17 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 
 	private void OnApplicationQuit()
 	{
+		// Sharkkit Dedicated Start - Redirect calls to the Network Wrapper and deinit it
 		foreach (KeyValuePair<CSteamID, Network_Player> remoteUser in remoteUsers)
 		{
-			if (SteamNetworking.GetP2PSessionState(remoteUser.Key, out var _))
+			if (NetworkWrapper.GetP2PSessionState(remoteUser.Key, out var _))
 			{
-				SteamNetworking.CloseP2PSessionWithUser(remoteUser.Key);
+				NetworkWrapper.CloseP2PSessionWithUser(remoteUser.Key);
 			}
 		}
 		SteamFriends.ClearRichPresence();
+		NetworkWrapper.Deinitialize();
+		// Sharkkit Dedicated End - Redirect calls to the Network Wrapper and deinit it
 	}
 
 	private void Awake()
@@ -247,6 +251,7 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 			UnityEngine.Object.Destroy(base.gameObject);
 			return;
 		}
+		NetworkWrapper.Initialize(); // Sharkkit Dedicated - Initializing the networking stack
 		initialized = true;
 		isHost = true;
 		HandleCommandArgs();
@@ -264,6 +269,7 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 
 	private void Update()
 	{
+		NetworkWrapper.Tick(); // Sharkkit Dedicated - Tick the Network Wrapper
 		ReadP2P_Channel_Connecting();
 		ReadP2P_Channel_Game();
 	}
@@ -388,7 +394,8 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 			Packet_Single graph = new Packet_Single(EP2PSend.k_EP2PSendReliable, message);
 			memoryStream.SetLength(0L);
 			binaryFormatter.Serialize(memoryStream, graph);
-			if (!SteamNetworking.SendP2PPacket(steamID, memoryStream.ToArray(), (uint)memoryStream.Length, packetSingle.SendType, (int)channel))
+			// Sharkkit Dedicated - Redirect call to Network Wrapper
+			if (!NetworkWrapper.SendP2PPacket(steamID, memoryStream.ToArray(), (uint)memoryStream.Length, packetSingle.SendType, (int)channel))
 			{
 				Debug.LogError("Failed to send fragmented message: " + packetSingle.message);
 			}
@@ -407,7 +414,8 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 			{
 				SendP2PFragmented(memoryStream, binaryFormatter, steamID, packetSingle, channel);
 			}
-			else if (!SteamNetworking.SendP2PPacket(steamID, memoryStream.ToArray(), (uint)memoryStream.Length, packetSingle.SendType, (int)channel) && Application.isEditor)
+			// Sharkkit Dedicated - Redirect call to Network Wrapper, also log error when not in editor to be consistent.
+			else if (!NetworkWrapper.SendP2PPacket(steamID, memoryStream.ToArray(), (uint)memoryStream.Length, packetSingle.SendType, (int)channel))
 			{
 				Debug.LogError("Failed to send message: " + packetSingle.message);
 			}
@@ -448,7 +456,8 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 		}
 		else
 		{
-			SteamNetworking.SendP2PPacket(steamID, memoryStream.ToArray(), (uint)memoryStream.Length, packet.SendType, (int)channel);
+			// Sharkkit Dedicated - Redirect call to Network Wrapper
+			NetworkWrapper.SendP2PPacket(steamID, memoryStream.ToArray(), (uint)memoryStream.Length, packet.SendType, (int)channel);
 		}
 		totalBytesSent += memoryStream.Length;
 		lastSecondBytes += memoryStream.Length;
@@ -574,12 +583,14 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 
 	private void ReadP2P_Channel_Connecting()
 	{
-		if (!SteamNetworking.IsP2PPacketAvailable(out var pcubMsgSize, 1))
+		// Sharkkit Dedicated - Redirect call to Network Wrapper
+		if (!NetworkWrapper.IsP2PPacketAvailable(out var pcubMsgSize, 1))
 		{
 			return;
 		}
 		byte[] array = new byte[pcubMsgSize];
-		if (!SteamNetworking.ReadP2PPacket(array, pcubMsgSize, out var _, out var psteamIDRemote, 1))
+		// Sharkkit Dedicated - Redirect call to Network Wrapper
+		if (!NetworkWrapper.ReadP2PPacket(array, pcubMsgSize, out var _, out var psteamIDRemote, 1))
 		{
 			return;
 		}
@@ -634,7 +645,11 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 				{
 					Raft_Network.OnJoinResult(psteamIDRemote, message_InitiateConnectionResult.result);
 				}
-				if (awaitingConnectionResponseUser.IsValid() && awaitingConnectionResponseUser == psteamIDRemote)
+
+				// Sharkkit Dedicated - Override this check because when connecting to a dedicated server, the steamId is not known before the handshake.
+				// Sharkkit Dedicated - In Vanilla it also feels rare that a client gets an InitiateResult request from a server they didn't connect to, anyway...
+				//if (awaitingConnectionResponseUser.IsValid() && awaitingConnectionResponseUser == psteamIDRemote)
+				if (awaitingConnectionResponseUser.m_SteamID != 0UL)
 				{
 					if (!IsConnectedToHost && message_InitiateConnectionResult.result == InitiateResult.Success)
 					{
@@ -650,20 +665,20 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 							SteamFriends.SetRichPresence(PresenceKeyConnect, CONNECT + HostID.ToString() + ":PW");
 						}
 						SteamFriends.SetRichPresence(PresenceKeyStatus, STATUS_RemoteClient);
-						SteamNetworking.AcceptP2PSessionWithUser(psteamIDRemote);
+						NetworkWrapper.AcceptP2PSessionWithUser(psteamIDRemote); // Sharkkit Dedicated - Redirect call to Network Wrapper
 						GameModeValueManager.SelectCurrentGameMode(message_InitiateConnectionResult.gameMode);
 						LoadScene(GameSceneName);
 						whitelistedUsers.AddUniqueOnly(psteamIDRemote);
 					}
 					else if (message_InitiateConnectionResult.result != InitiateResult.Fail_AlreadyConnecting && message_InitiateConnectionResult.result != InitiateResult.Fail_AlreadyOnServer && message_InitiateConnectionResult.result != 0)
 					{
-						SteamNetworking.CloseP2PSessionWithUser(psteamIDRemote);
+						NetworkWrapper.CloseP2PSessionWithUser(psteamIDRemote); // Sharkkit Dedicated - Redirect call to Network Wrapper
 					}
 					awaitingConnectionResponseUser.Clear();
 				}
 				else
 				{
-					SteamNetworking.CloseP2PSessionWithUser(psteamIDRemote);
+					NetworkWrapper.CloseP2PSessionWithUser(psteamIDRemote); // Sharkkit Dedicated - Redirect call to Network Wrapper
 				}
 				break;
 			}
@@ -700,10 +715,11 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 	private void ReadP2P_Channel_Game()
 	{
 		uint pcubMsgSize;
-		while (SteamNetworking.IsP2PPacketAvailable(out pcubMsgSize))
+		// Sharkkit Dedicated - Redirect call to Network Wrapper
+		while (NetworkWrapper.IsP2PPacketAvailable(out pcubMsgSize))
 		{
 			byte[] array = new byte[pcubMsgSize];
-			if (!SteamNetworking.ReadP2PPacket(array, pcubMsgSize, out var _, out var psteamIDRemote))
+			if (!NetworkWrapper.ReadP2PPacket(array, pcubMsgSize, out var _, out var psteamIDRemote))
 			{
 				continue;
 			}
@@ -975,7 +991,8 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 	{
 		if (awaitingConnectionResponseUser.IsValid())
 		{
-			SteamNetworking.CloseP2PSessionWithUser(HostID);
+			// Sharkkit Dedicated - Redirect call to Network Wrapper
+			NetworkWrapper.CloseP2PSessionWithUser(HostID);
 			awaitingConnectionResponseUser.Clear();
 			hostID.Clear();
 		}
@@ -1055,7 +1072,7 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 		{
 			return InitiateResult.Fail_NotHost;
 		}
-		if (appBuildID != Settings.AppBuildID)
+		if (appBuildID != 0 && appBuildID != Settings.AppBuildID) // SharkkitDedicated - Allow 0 as AppBuildID
 		{
 			return InitiateResult.Fail_MissmatchAppBuildID;
 		}
@@ -1426,7 +1443,9 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 		{
 			connectingUsers.Remove(remoteID);
 		}
-		if (IsUserWhitelisted(remoteID) && SteamNetworking.AcceptP2PSessionWithUser(remoteID))
+
+		// Sharkkit Dedicated - Redirect call to Network Wrapper
+		if (IsUserWhitelisted(remoteID) && NetworkWrapper.AcceptP2PSessionWithUser(remoteID))
 		{
 			Helper.LogBuild("Semih_Network: OnIncommingConnection = Adding client " + SteamFriends.GetFriendPersonaName(remoteID));
 			AddPlayer(remoteID, characterSettings);
@@ -1566,7 +1585,8 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 			{
 				ComponentManager<SaveAndLoad>.Value.SaveGame(true);
 			}
-			SteamNetworking.CloseP2PSessionWithUser(remoteID);
+			// Sharkkit Dedicated - Redirect call to Network Wrapper
+			NetworkWrapper.CloseP2PSessionWithUser(remoteID);
 		}
 	}
 
@@ -1575,7 +1595,8 @@ public class Raft_Network : MonoBehaviour, SceneEventInterface
 		yield return new WaitForSeconds(timeDelay);
 		foreach (KeyValuePair<CSteamID, Network_Player> remoteUser in remoteUsers)
 		{
-			SteamNetworking.CloseP2PSessionWithUser(remoteUser.Key);
+			// Sharkkit Dedicated - Redirect call to Network Wrapper
+			NetworkWrapper.CloseP2PSessionWithUser(remoteUser.Key);
 		}
 		remoteUsers.Clear();
 		isHost = false;
